const rebaseToken = artifacts.require("rebaseToken");
const rebaseTokenProxy = artifacts.require("rebaseTokenProxy");
contract('rebaseToken', function (accounts){
    it('rebaseToken normal tests', async function (){
        let rToken = await rebaseToken.new();
        await rToken.setTokenName("leverageToken");
        let name = await rToken.name();
        console.log(name);
        let symbol = await rToken.symbol();
        console.log(symbol);
        let decimals = await rToken.decimals();
        console.log(decimals.toNumber());
        let totalSupply = await rToken.totalSupply();
        console.log("totalSupply : ",totalSupply.toString());
        let balance = await rToken.balanceOf(accounts[0]);
        console.log("balance 0 :",balance.toString());
        await rToken.mint(accounts[1],10000000000);
        totalSupply = await rToken.totalSupply();
        console.log("totalSupply : ",totalSupply.toString());
        balance = await rToken.balanceOf(accounts[1]);
        console.log("balance 1 :",balance.toString());
        await rToken.calRebaseRatio(90000000000);
        await rToken.mint(accounts[2],10000000000);
        totalSupply = await rToken.totalSupply();
        console.log("totalSupply : ",totalSupply.toString());
        balance = await rToken.balanceOf(accounts[1]);
        console.log("balance 1 :",balance.toString());
        balance = await rToken.balanceOf(accounts[2]);
        console.log("balance 2 :",balance.toString());
        await rToken.calRebaseRatio(9000000000);
        totalSupply = await rToken.totalSupply();
        console.log("totalSupply : ",totalSupply.toString());
        balance = await rToken.balanceOf(accounts[1]);
        console.log("balance 1 :",balance.toString());
        balance = await rToken.balanceOf(accounts[2]);
        console.log("balance 2 :",balance.toString());
        await rToken.mint(accounts[0],10000000000);
        await rToken.transfer(accounts[3],5000000000);
        balance = await rToken.balanceOf(accounts[0]);
        console.log("balance 0 :",balance.toString());
        balance = await rToken.balanceOf(accounts[3]);
        console.log("balance 3 :",balance.toString());
        totalSupply = await rToken.totalSupply();
        console.log("totalSupply : ",totalSupply.toString());
    })
    it('rebaseToken proxy normal tests', async function (){
        let rTokenImply = await rebaseToken.new();
        let rToken = await rebaseTokenProxy.new(rTokenImply.address,"leverageToken");
        let name = await rToken.name();
        console.log(name);
        let symbol = await rToken.symbol();
        console.log(symbol);
        let decimals = await rToken.decimals();
        console.log(decimals.toNumber());
        let totalSupply = await rToken.totalSupply();
        console.log("totalSupply : ",totalSupply.toString());
        let balance = await rToken.balanceOf(accounts[0]);
        console.log("balance 0 :",balance.toString());
        await rToken.mint(accounts[1],10000000000);
        totalSupply = await rToken.totalSupply();
        console.log("totalSupply : ",totalSupply.toString());
        balance = await rToken.balanceOf(accounts[1]);
        console.log("balance 1 :",balance.toString());
        await rToken.calRebaseRatio(90000000000);
        await rToken.mint(accounts[2],10000000000);
        totalSupply = await rToken.totalSupply();
        console.log("totalSupply : ",totalSupply.toString());
        balance = await rToken.balanceOf(accounts[1]);
        console.log("balance 1 :",balance.toString());
        balance = await rToken.balanceOf(accounts[2]);
        console.log("balance 2 :",balance.toString());
        await rToken.calRebaseRatio(9000000000);
        totalSupply = await rToken.totalSupply();
        console.log("totalSupply : ",totalSupply.toString());
        balance = await rToken.balanceOf(accounts[1]);
        console.log("balance 1 :",balance.toString());
        balance = await rToken.balanceOf(accounts[2]);
        console.log("balance 2 :",balance.toString());
        await rToken.mint(accounts[0],10000000000);
        await rToken.transfer(accounts[3],5000000000);
        balance = await rToken.balanceOf(accounts[0]);
        console.log("balance 0 :",balance.toString());
        balance = await rToken.balanceOf(accounts[3]);
        console.log("balance 3 :",balance.toString());
        totalSupply = await rToken.totalSupply();
        console.log("totalSupply : ",totalSupply.toString());
    })
})